using System;
using System.Collections.Generic;
using NLog;

namespace Lokad.Logging
{
    /// <summary>
    ///     Serves as a base class of all implementations of 
    ///     <see cref="ITrace"/> (as generated by <see cref="Tracer"/>).
    /// </summary>
    public abstract class BaseTrace : ITrace
    {
        /// <summary> The logger associated to this trace class. </summary>        
        protected readonly Lazy<Logger> Log;

        protected BaseTrace(string name)
        {
            Log = Tracer.CreateLoggerFor(name);
        }

        public void EmitLogMessage(
            string message, 
            IReadOnlyDictionary<string, object> context, 
            LogLevel level)
        {
            var log = Log.Value;
            if (log == null) throw new NullReferenceException("Expected Logger");

            var evt = new LogEventInfo(Tracer.Level(level), log.Name, message)
            {
                Parameters = new object[] { context }
            };

            var hasContext = context != null && context.Count > 0;
            if (hasContext)
                foreach (var kv in context)
                    evt.Properties[kv.Key] = kv.Value;

            log.Log(evt);
        }

        public void EmitLogMessage(
            Exception ex, 
            string message, 
            Dictionary<string, object> context, 
            LogLevel level = LogLevel.Error)
        {
            var log = Log.Value;
            if (log == null) return;

            var evt = new LogEventInfo(Tracer.Level(level), log.Name, message);

            var hasContext = context != null && context.Count > 0;
            if (hasContext)
                foreach (var kv in context)
                    evt.Properties[kv.Key] = kv.Value;

            evt.Exception = ex;

            log.Log(evt);
        }
    }
}
